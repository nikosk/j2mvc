j2mvc tutorial

= Introduction =

This document will guide you through writing a sample application with j2mvc. The application is a simple todo list. 

  * You will need:
  * A working copy of Mysql.
  * A database to work on.
  * A copy of j2mvc.

==Step 1: Create todo list table==

Assuming you have installed Mysql and created a database you will also need to create the tables that hold your data.
First we will create a table to hold your todo lists :

{{{
CREATE TABLE `todo_lists` (
  `id` int(10) unsigned NOT NULL auto_increment,
  `label` varchar(45) NOT NULL,
  PRIMARY KEY  (`id`)
) DEFAULT CHARSET=utf8 ;
}}}


==Step 2: Create your model==

Models help you group your data access code in one coherent piece of code specifically created to handle conceptually related tasks. This piece of code is called a model and serves as an abstraction of the underlying database. Lets create our first model:

{{{
package gr.dsigned.jmvc.models;

public class TodoList extends Model {
    
    public TodoList() throws Exception {
        this.tableName = "todo_lists";
    }

}
}}}

As you can see from the above code each of your app's model must reside inside the gr.dsigned.jmvc.models package. Your model must extend gr.dsigned.jmvc.db.Model and the constructor throws an exception.
Be careful to set the name of the table that this model corresponds to because some methods of depend on it.

For the first step we will need to create a method that returns a list of all the todo lists currently stored in the database: 

{{{
public ArrayList<Bean> getLists() throws SQLException {
        QuerySet qs = new QuerySet();
        qs.from("todo_lists");             
        return db.get(qs);
}
}}}

First we need to explain what Bean and QuerySet are. Bean is a shorthand way of writing LinkedHashMap<String, String>. Bean extends LinkedHashMap and therefore contains all the methods provided by it. 
QuerySet is a class that helps you write SQL statements, we will see how it works later on.

The above method will return an ArrayList of hashmaps containing the values for each column in the result of the query. Each entry in the ArrayList corresponds to one row from the results and each entry of Bean contains the name/value pair of each column in the result.

Remember you must make all your methods throw an Exception so that the framework reports the error.  

==Step 3: Create you first controller==

Controllers contain the logic in your application. Each controller has methods to handle requests and return the response. As with the models, the controllers must reside in the gr.dsigned.jmvc.controllers package :

{{{
package gr.dsigned.jmvc.controllers;

public class Sites extends Controller {

    public Sites() throws Exception {
    }

}
}}}

Now that we have our controller we need to create the default method. When the controller is called without an action this is the method that gets called: 

{{{
public void index() throws Exception {
        PageData data = new PageData();
        $.loadView("list", data);
}
}}}

We just created an empty controller with a default method that only load a template.
When someone visits the home page of our app we want to show him our todo_lists. That's where our model from step 2 comes in to play:

{{{
public void index() throws Exception {
        PageData data = new PageData();
        TodoList todoList = $.loadModel("TodoList"); // Load model
        ArrayList<Bean> todoList = todoList. getLists();  // Get all lists
        $.loadView("list", data);
}
}}}

By adding just 2 lines we now have an ArrayList of our todo lists. All we need to do now is put the results in HTML and display them. This is where Renderers come in to play. A common task in web applications is the retrieval of data from the database which we render in HTML and send them to the browser. Instead of polluting are controller logic with ugly loops going through the data and appending HTML tags we use a Renderer to  do this job elsewhere. This way our controller is clean and readable and we also have the ability to reuse the rendering code elsewhere.








